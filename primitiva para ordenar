/*
    @function ls_ordenar
    @autor Joaquin
    @fecha 04/10/2015
    @version 1.0
    @param pLs puntero a la lista a ordenar
    @pre pLs creada y no vacia
    @post pLs ordenada y devuelve TRUE o si no se pudo ordenar devuelve FALSE
*/

int ls_ordenar(TListaSimple *pLs){

   int cmpfunc(const void *name1, const void *name2)
    {
        const char *name1_ = *(const char **)name1;
        const char *name2_ = *(const char **)name2;
        return strcmp(name1_, name2_);
    }

    TNodoSimple *pNa;
    int i,cont=1;
    char** vec;

    pNa=pLs->Primero;
    while(pNa->Siguiente!=NULL){
        cont++;
        pNa=pNa->Siguiente;
    }
    pNa=pLs->Primero;

    vec=(char**)malloc(cont*sizeof(char*));
    if(!vec)
        return FALSE;

    for(i=0;i=cont-1;i++){
        vec[i]=pNa->name;
        pNa=pNa->Siguiente;
    }

    qsort(vec,cont,sizeof(char*),cmpfunc);       /*agregar lib*/

    pLs->Corriente=pLs->Primero;
    for(i=0;i=cont-1,i++){
        pLs->Corriente->name=vec[i];
        pLs->Corriente=pLs->Corriente->Siguiente;
    }
    return TRUE;
